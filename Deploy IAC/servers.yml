Description: >
    Victor Cazacov 
    This template deploys web-servers in an autoscale group, sets security groups,
    deploys load-balancer that provides public access to that web-servers

Parameters:
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

  InstanceType:
      Description: AWS instance type. It should be t3.small or better.
      Type: String
      Default: t3.medium

  ImageId:
    Description: AWS image-id. Should include apt package manager. Ubuntu 18 recommended.
    Type: String
    Default: ami-003634241a8fcdec0

Resources:

# Web-servers security group        
# Allow inbound port 80 for apache-hosted web-site
# Allow inbound port 22 for SSH
# Unrestricted outbound connections
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y 
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
          rm udacity.zip
      ImageId: !Ref ImageId
      SecurityGroups:
      - Ref: WebServerSecGroup
      IamInstanceProfile: 
        Ref: WebS3InstanceProfile      
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: 
        !Sub "${EnvironmentName}-ASG"
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Name: !Sub "${EnvironmentName}-WebAppTG"

# Load-balancer security group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

# Load balancer in  public subnets          
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
      Name: !Sub "${EnvironmentName}-WebAppLB"
  
# Application load balance listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

# Listen on /, forward the requests to the target group      
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  
# Instance profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  WebS3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      InstanceProfileName: !Sub "${EnvironmentName}-WebS3ReadonlyInstanceProfile"
      Roles:
      - !Ref S3ReadonlyRole

  S3ReadonlyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::Region}-${EnvironmentName}-S3ReadonlyRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3readonly
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:Get*
          - s3:List
          Resource: "*"
      Roles:
      - !Ref S3ReadonlyRole  

# Outputs: 
Outputs: 
  LoadBalancerUrl: 
    Description: Public URL of the load balancer
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerUrl